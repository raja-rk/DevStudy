1. Install Java SE 17 (JDK)
-https://www.oracle.com/in/java/technologies/downloads/#jdk17-windows
-Locate java 17's Bin folder in local PC and put its path into environtment variables(C-->Program files-->java-->java-17-->Bin)

2. Install VS Code
https://code.visualstudio.com/download

3. Extension: Extension Pack For Java

Running Java Code:-
1. JShell: JShell, or Java Shell, is an interactive tool that helps people learn Java programming and prototype Java code.
    No need for javac: JShell reads source code and runs it on the fly.

2. Java is patform indepedent as it will run in any machine that have JVM installed on it.
    Running java code requires "JVM".

    Java High Level Language Code(.java) --> Java Compiler(javac) 
    --> Byte code (Low Level Language Code)(.class) --> JDK: [JVM(run the code) + JRE(contains libraries)]

Data Types:-
int -> byte, short, int , long
float -> double, float
char
boolean

Int - 4Bytes
Long - 8Bytes
short - 2Bytes
byte - 1Bytes (-2^7 - 2^7-1)
Float - 4Bytes
double - 8Bytes (by default point values are double in java)
char - 2Bytes
    Java use 'Unicode' instead of 'ascii' to store characters in memory
Boolean - 1bit - t/f

Opertors
Conditional statements
Switch case statement
break statement
loops - while, for , do while

Object oriented programming:-
Method overloading - multiple function with same name within one class
Encapsulation - preventing outside world to access the feature of a perticular class, (can be done using private keyword for the properties that u want to encapsulate and use getter and and seeter functions to access them.)

**In Java, memory is divided into two main areas: the stack and the heap. The stack is a fixed-size memory area that is used to store local variables and function calls. 
**The heap is a dynamic memory area that is used to store objects and class instances. 
**In Java, a class without an access modifier is considered package-private. This means that it is only accessible to other classes within the same package. It is less restrictive than private but more restrictive than protected and public.
**strings are allocated memory in heap in string constant pool
**length and capacity are two different fucntions , capacity = length + 16
**The main difference between the two methods is that append() adds a new element to the end of a list, while concat() combines two strings together.
**in java class loads first and then its objects get instantiated
**java class loads on object creation automatically but we can load it without creating any object using "Class.forName("className to load")";
** by default each constructor have super() method that runs first when constructor code run;
**every class in java extends a Object class (by default)
**this() calls consturctor of same class
**Objects with no name are called anonymous object (ex: new C();)
**multiple inheritance is not supported in java(diamond problem)
**package in java - create a folder that have the classes that u want to put into the package, to access classes of package out of the package u have to use import statement to import the class from the package first and the use it.
**every java file by default imports java.lang package.
**In Java, a single .java file can contain multiple classes, but only one public class. This is a convention followed by the Java compiler (javac) and the Java Virtual Machine (JVM)
**final class cannot be extended

Access Modifiers:-
-public 
-private
-protected
-default (private protected) - the variables and methods are accessed within the same package only

**by default java variables and method have 'default' as access modifier

dynamic method dispatch - runtime polymorphism
downcasting and upcasting - typecasting

wrapper class
boxing - In Java, boxing is the process of converting a primitive data type into its corresponding wrapper class object.
unboxing - In Java, unboxing is the process of converting a wrapper class object into its corresponding primitive data type.

abstract keyword-
abstract method can only belong to abstract class
we can't create object of abstract class
abstract method cannot be static 
overiding static method is not possible
innerclass can be static but outer class cannot be static
by default all methods in interface are public abstract
all the variables in interface are by default final and static
interface do not have memory allocation, the calss that implement interface are allocated memory for interface
a class can implement multiple interfaces but like only one class can be extended from another class

annotations - are the indicators the tells compiler to handle something accordingly.
@oveerride - indicates that the function is a overiden function.
@Deprecated - indicates that the class is Deprecated you should avoid using it.
@supresswaring - to hide the warnings
@FunctionalInterface
etc....


interfaces:
1. normal
2. functional - only contains one method
3. Marker - it do not have any method or variables, it is empty, (used for serialization and deserialization of code)

lamda expression

system.out.println()
println is a fucntion of PrintStream class 
out is a object of PrintStream class and it is declared in system class and it is static


thread stated:
1. new 
2. runnable
3. Running
4. waiting
5. dead


collection in java:-
collection API -> concept
collection -> interface
colections -> class

LVTI - local variable type inference
'var' keyword insted of using data type
the variable declared with var requires initializer always.

abstract classes are meant to be inherited
final classes cannot be inherited
sealed classes can be iherited by perticular set of classes only
